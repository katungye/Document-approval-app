<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <div class="login-container">
    <div class="login-box">
      <h2>Login</h2>
      <form id="loginForm">
        <div class="input-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" required>
        </div>
        <div class="input-group">
          <label for="password">Password</label>
          <input type="password" id="password" name="password" required>
        </div>
        <div class="input-group">
          <button type="submit">Login</button>
        </div>
      </form>

      <!-- This is where the message will be displayed -->
      <div id="message" style="margin-top: 20px; color: red;"></div>

      <!-- This will display the logged-in user's email -->
      <div id="userInfo" style="margin-top: 20px; color: blue;"></div>
    </div>
  </div>

  <script>
    document.getElementById('loginForm').addEventListener('submit', async function (event) {
      event.preventDefault(); // Prevents the default form submission

      // Get the values from the form fields
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;

      // Clear any previous messages
      const messageDiv = document.getElementById('message');
      messageDiv.textContent = ''; // Clear the message div before the new message

      const userInfoDiv = document.getElementById('userInfo');
      userInfoDiv.textContent = ''; // Clear the user info div before the new user data

      try {
        // Send the data to the /auth/login route
        const response = await fetch('/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ email, password }) // Send data as JSON
        });

        const result = await response.json();

        if (response.ok) {
          // Assuming the response contains both the access and refresh tokens
          const accessToken = result.accessToken;
          const refreshToken = result.refreshToken;

          // Store the tokens in localStorage or sessionStorage
          localStorage.setItem('accessToken', accessToken);
          localStorage.setItem('refreshToken', refreshToken);

          // Decode the access token to get user information
          const decodedToken = parseJwt(accessToken);

          // Display the logged-in user's email (or any other information in the token)
          userInfoDiv.textContent = 'Logged in as: ' + decodedToken.email;

          // Display success message
          messageDiv.style.color = 'green';
          messageDiv.textContent = 'Login successful! Redirecting...';

          // Redirect to dashboard after a short delay
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 2000); // Redirect after 2 seconds
        } else {
          // Display error message
          messageDiv.style.color = 'red';
          messageDiv.textContent = 'Login failed: ' + result.message;
        }
      } catch (error) {
        // Handle network or other errors
        messageDiv.style.color = 'red';
        messageDiv.textContent = 'An error occurred: ' + error.message;
      }
    });

    // Helper function to parse the JWT
    function parseJwt(token) {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
      }).join(''));
      //console.log(JSON.parse(jsonPayload));
      return JSON.parse(jsonPayload);
    }
  </script>
</body>
</html>
